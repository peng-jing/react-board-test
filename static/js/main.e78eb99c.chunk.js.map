{"version":3,"sources":["components/App/App.js","reportWebVitals.js","index.js"],"names":["Page","styled","div","Title","h1","MessageForm","form","MessageTextArea","textarea","SubmitButton","button","MessageList","MessageContent","MessageHead","MessageAuthor","MessageTime","MessageBody","MessageDeleteBtn","Message","author","time","children","handleDelete","id","onClick","Loding","ErrorMessage","App","useState","messages","setMessages","messageApiError","setMessageApiError","value","setValue","postMessageError","setPostMessageError","isLodingPostMessage","setIsLodingPostMessage","totalCountNessage","setTotalCountMessage","fetchMessage","fetch","then","res","headers","get","json","data","catch","err","message","console","log","Array","from","length","_","i","useEffect","method","onSubmit","e","preventDefault","body","JSON","stringify","nickname","ok","onChange","target","onFocus","rows","toString","map","Date","createdAt","toLocaleString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e78eb99c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport propTypes from \"prop-types\";\nconst API_ENDPOINT =\n  \"https://student-json-api.lidemy.me/comments?_sort=createdAt&_order=desc&_page=1&_limit=5\";\nconst Page = styled.div`\n  width: 300px;\n  margin: 10px auto;\n`;\nconst Title = styled.h1`\n  color: #333;\n`;\nconst MessageForm = styled.form``;\nconst MessageTextArea = styled.textarea`\n  display: block;\n  width: 100%;\n`;\nconst SubmitButton = styled.button`\n  margin-top: 20px;\n`;\nconst MessageList = styled.div``;\nconst MessageContent = styled.div`\n  border: solid 1px;\n  border-radius: 8px;\n  margin: 10px auto;\n  padding: 8px 16px;\n`;\nconst MessageHead = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst MessageAuthor = styled.div`\n  font-size: 14px;\n  color: #666;\n`;\nconst MessageTime = styled.div`\n  color: #999;\n`;\nconst MessageBody = styled.div`\n  margin-top: 10px;\n  font-size: 16px;\n`;\nconst MessageDeleteBtn = styled.button``;\nconst Message = ({ author, time, children, handleDelete, id }) => {\n  return (\n    <MessageContent>\n      <MessageHead>\n        <MessageAuthor>{author}</MessageAuthor>\n        <MessageTime>{time}</MessageTime>\n        <MessageDeleteBtn\n          onClick={() => {\n            handleDelete(id);\n          }}\n        >\n          刪除\n        </MessageDeleteBtn>\n      </MessageHead>\n      <MessageBody>{children}</MessageBody>\n    </MessageContent>\n  );\n};\nconst Loding = styled.div`\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 30px;\n`;\nMessage.propTypes = {\n  author: propTypes.string,\n  time: propTypes.string,\n  children: propTypes.node,\n  handleDelete: propTypes.func,\n  key: propTypes.number,\n};\nconst ErrorMessage = styled.div`\n  color: red;\n`;\nfunction App() {\n  const [messages, setMessages] = useState(null);\n  const [messageApiError, setMessageApiError] = useState(null);\n  const [value, setValue] = useState();\n  const [postMessageError, setPostMessageError] = useState();\n  const [isLodingPostMessage, setIsLodingPostMessage] = useState(false);\n  const [totalCountNessage, setTotalCountMessage] = useState();\n\n  const fetchMessage = () => {\n    return fetch(API_ENDPOINT)\n      .then((res) => {\n        setTotalCountMessage(res.headers.get(\"X-Total-Count\"));\n        return res.json();\n      })\n      .then((data) => {\n        setMessages(data);\n      })\n      .catch((err) => {\n        setMessageApiError(err.message);\n      });\n  };\n  console.log(Array.from({ length: totalCountNessage }, (_, i) => i));\n\n  useEffect(() => {\n    fetchMessage();\n  }, []);\n  const handleTextareaChange = (e) => {\n    setValue(e.target.value);\n  };\n  const handleTextareaFocus = () => {\n    setPostMessageError(null);\n  };\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    if (isLodingPostMessage) {\n      return;\n    }\n    setIsLodingPostMessage(true);\n    fetch(\"https://student-json-api.lidemy.me/comments?_page=1&_limit=5\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        nickname: \"hello\",\n        body: value,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setIsLodingPostMessage(false);\n        if (data.ok === 0) {\n          setPostMessageError(data.message);\n          return;\n        }\n        setValue(\"\");\n        fetchMessage();\n      })\n      .catch((err) => {\n        setIsLodingPostMessage(false);\n        setPostMessageError(err.message);\n      });\n  };\n  const handleDelete = (id) => {\n    if (isLodingPostMessage) {\n      return;\n    }\n    setIsLodingPostMessage(true);\n    fetch(`https://student-json-api.lidemy.me/comments/${id}`, {\n      method: \"DELETE\",\n    })\n      .then(() => {\n        setIsLodingPostMessage(false);\n        fetchMessage();\n      })\n      .catch((err) => {\n        setPostMessageError(err.message);\n      });\n  };\n\n  return (\n    <Page>\n      {isLodingPostMessage && <Loding>Loding...</Loding>}\n      <Title>留言板</Title>\n      <MessageForm onSubmit={handleFormSubmit}>\n        <MessageTextArea\n          value={value}\n          onChange={handleTextareaChange}\n          onFocus={handleTextareaFocus}\n          rows={10}\n        />\n        <SubmitButton>送出</SubmitButton>\n      </MessageForm>\n      {postMessageError && <ErrorMessage>{postMessageError}</ErrorMessage>}\n      {messageApiError && (\n        <ErrorMessage>\n          Something went wrong! {messageApiError.toString()}\n        </ErrorMessage>\n      )}\n      {messages && messages.length === 0 && <div>No data</div>}\n      <MessageList>\n        {messages &&\n          messages.map((message) => (\n            <Message\n              key={message.id}\n              id={message.id}\n              author={message.nickname}\n              time={new Date(message.createdAt).toLocaleString()}\n              handleDelete={handleDelete}\n            >\n              {message.body}\n            </Message>\n          ))}\n      </MessageList>\n    </Page>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}